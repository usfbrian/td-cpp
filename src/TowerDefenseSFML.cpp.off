#include "TowerDefense.hpp"
#include "Tower.hpp"
#include <iostream>
#include <string>
#include <thread>
#include <vector>
#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <X11/Xlib.h>

#define VERSION "0.9"
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600


void renderingThread(sf::RenderWindow* window) {
  window->setActive(true);
  while (window->isOpen()) {
    sf::CircleShape shape(100.f);
    shape.setFillColor(sf::Color::Green);
//    window->draw(shape);
    window->display();
  }
}

int main(int argc, char *argv[]) {
  std::string argOptionVersion = "--version";
  if (std::find(argv, argv + argc, argOptionVersion) != argv + argc) {
    std::cout << VERSION << std::endl;
    return 0;
  }

  XInitThreads();

  sf::SoundBuffer buffer;  // TODO(brwr): varname, thread)
  if (!buffer.loadFromFile("sound.wav"))
    return -1;

  sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "My Window");

  window.setActive(false);

  sf::Thread t(&renderingThread, &window);  // t starts running
  t.launch();  // TODO(brwr): Replace with std::thread?

  while (window.isOpen())
  {
    sf::Event event;
    while (window.pollEvent(event))
    {
      if (event.type == sf::Event::Closed)
        window.close();
    }
  }

  std::vector<Tower> towerList;
  Tower thisTower;
  towerList.push_back(thisTower);
  Tower thatTower;
  thatTower.changeHealth(-20);
  towerList.push_back(thatTower);
  auto lambda = [](auto x){ return x; };
  std::cout << lambda("Generic lambda") << std::endl;
  for(Tower& t : towerList) {
    std::cout << t.getHealth() << std::endl;
  }
  return 0;
}
